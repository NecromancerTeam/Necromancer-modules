# Necromanser modules
# ¬© Copyright 2025
# Git Hub https://github.com/NecromancerTeam/Modules-Heroku
# N:modules https://t.me/Lptmiop
# By Lptm-iop $ Necromanser team
import random
from .. import loader, utils

@loader.tds
class RandomMod(loader.Module):
    """üé≤ –ü—Ä–æ—Å—Ç–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: —á–∏—Å–ª–æ, –≤—ã–±–æ—Ä, –º–æ–Ω–µ—Ç–∫–∞, –ø–∞—Ä–æ–ª—å"""

    strings = {
        "name": "Random",
        "usage_num": "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.randnum <–º–∏–Ω> <–º–∞–∫—Å></code>",
        "usage_choice": "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.choice <–≤–∞—Ä–∏–∞–Ω—Ç1> <–≤–∞—Ä–∏–∞–Ω—Ç2> ...</code>",
        "usage_coin": "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.coin</code>",
        "usage_pass": "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.passgen <–¥–ª–∏–Ω–∞></code>",
        "coin_head": "üéâ –í—ã–ø–∞–ª–∞: –û—Ä—ë–ª",
        "coin_tail": "üòé –í—ã–ø–∞–ª–∞: –†–µ—à–∫–∞",
        "pass_invalid_len": "<b>‚ùå –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 4 –¥–æ 64</b>",
    }

    @loader.command(ru_doc="–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
    async def randnumcmd(self, message):
        """.randnum <–º–∏–Ω> <–º–∞–∫—Å> ‚Äî —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ"""
        args = utils.get_args(message)
        if len(args) != 2 or not all(x.lstrip("-").isdigit() for x in args):
            return await utils.answer(message, self.strings("usage_num"))
        low, high = int(args[0]), int(args[1])
        if low > high:
            low, high = high, low
        num = random.randint(low, high)
        await utils.answer(message, f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: <b>{num}</b>")

    @loader.command(ru_doc="–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞")
    async def choicecmd(self, message):
        """.choice <–≤–∞—Ä–∏–∞–Ω—Ç1> <–≤–∞—Ä–∏–∞–Ω—Ç2> ... ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("usage_choice"))
        choices = args.split()
        choice = random.choice(choices)
        await utils.answer(message, f"üîÆ –í—ã–±–æ—Ä: <b>{choice}</b>")

    @loader.command(ru_doc="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É")
    async def coincmd(self, message):
        """.coin ‚Äî –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É"""
        flip = random.choice(["head", "tail"])
        text = self.strings["coin_head"] if flip == "head" else self.strings["coin_tail"]
        await utils.answer(message, text)

    @loader.command(ru_doc="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    async def passgencmd(self, message):
        """.passgen <–¥–ª–∏–Ω–∞> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"""
        args = utils.get_args(message)
        if len(args) != 1 or not args[0].isdigit():
            return await utils.answer(message, self.strings("usage_pass"))
        length = int(args[0])
        if length < 4 or length > 64:
            return await utils.answer(message, self.strings("pass_invalid_len"))
        chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+"
        password = "".join(random.choice(chars) for _ in range(length))
        await utils.answer(message, f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:\n<code>{password}</code>")