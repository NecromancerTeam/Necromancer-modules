# Necromanser modules
# ¬© Copyright 2025
# Git Hub https://github.com/NecromancerTeam/Modules-Heroku
# N:modules https://t.me/Lptmiop
# By Lptm-iop $ Necromanser team
from .. import loader, utils
import datetime
try:
    from zoneinfo import ZoneInfo
except ImportError:
    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python
    from backports.zoneinfo import ZoneInfo

@loader.tds
class TimeZoneMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.
    –°–¥–µ–ª–∞–Ω–æ –æ—Ç https://t.me/Lptmiop
    """

    strings = {
        "name": "TimeZone",
        "time": "<b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è</b> <code>{}</code>:\n<blockquote>{}</blockquote>",
        "error": "‚ùó <b>–û—à–∏–±–∫–∞:</b> {}",
        "help": (
            "<b>üìñ –ú–æ–¥—É–ª—å TimeZone</b>\n\n"
            "‚Ä¢ <code>.time</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º\n"
            "    ‚Äî –ø—Ä–∏–º–µ—Ä: <code>.time Europe/London</code>\n\n"
            "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b> .config TimeZone\n"
            "‚Ä¢ timezone ‚Äî —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Kiev)\n\n"
            "<b>–ê–≤—Ç–æ—Ä:</b> http://t.me/jdjskskskskkdkmodules"
        )
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "timezone", "Europe/Kiev",
                "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Kiev)",
                validator=loader.validators.String()
            )
        )

    @loader.command()
    async def timecmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
        args = utils.get_args_raw(message).strip()
        tz_name = args if args else self.config["timezone"]
        try:
            tz = ZoneInfo(tz_name)
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(utils.escape_html(str(e))))
            return

        now = datetime.datetime.now(tz)
        time_str = now.strftime("%Y-%m-%d %H:%M:%S")
        await utils.answer(message, self.strings["time"].format(utils.escape_html(tz_name), time_str))

    @loader.command()
    async def timezonehelpcmd(self, message):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–æ–¥—É–ª—é TimeZone"""
        await utils.answer(message, self.strings["help"])