# Necromanser modules
# ¬© Copyright 2025
# Git Hub https://github.com/NecromancerTeam/Modules-Heroku
# N:modules https://t.me/Lptmiop
# By Lptm-iop $ Necromanser team
from .. import loader, utils
import random

@loader.tds
class LuckRollMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤, –º–æ–Ω–µ—Ç–∫–∏, —É–¥–∞—á–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""

    strings = {
        "name": "LuckRoll",
        "cfg_lang": "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {}",
        "cfg_emoji": "‚úÖ –≠–º–æ–¥–∑–∏: {}",
        "cfg_default_range": "‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {}",
        "roll_usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .roll [–¥–æ] –∏–ª–∏ .roll [–æ—Ç] [–¥–æ]",
        "roll_result": "üé≤ –í—ã–ø–∞–ª–æ: {}",
        "luck_result": "üå† –£—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏: {}%",
        "coin_usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .coin",
        "coin_heads": "ü™ô –û—Ä—ë–ª",
        "coin_tails": "ü™ô –†–µ—à–∫–∞",
        "luckmsg_usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .luckmsg",
        "luck_messages": [
            "–°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–∞–π–¥—ë—à—å —Ç–æ, —á—Ç–æ –ø–æ—Ç–µ—Ä—è–ª!",
            "–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω –≤ —Ä–µ—à–µ–Ω–∏—è—Ö —Å–µ–≥–æ–¥–Ω—è.",
            "–û–∂–∏–¥–∞–π –ø—Ä–∏—è—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!",
            "–î–µ–Ω—å –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç—ã–º, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è.",
            "–ù–µ –∂–¥–∏ —á—É–¥–∞ ‚Äî –±—É–¥—å –∏–º."
        ],
        "language_usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .language <ru/en>",
        "language_set": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {}"
    }

    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è
        self.config = loader.ModuleConfig(
            loader.ConfigValue("default_range", 6, lambda: self.strings("cfg_default_range")),
            loader.ConfigValue("emoji", True, lambda: self.strings("cfg_emoji")),
            loader.ConfigValue("language", "ru", lambda: self.strings("cfg_lang")),
        )

    @loader.command(ru_doc="–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", description=".roll [–¥–æ] –∏–ª–∏ .roll [–æ—Ç] [–¥–æ]")
    async def rollcmd(self, message):
        """–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ"""
        args = utils.get_args(message)
        emoji = "üé≤ " if self.config["emoji"] else ""
        try:
            if len(args) == 0:
                low, high = 1, int(self.config["default_range"])
            elif len(args) == 1:
                low, high = 1, int(args[0])
            elif len(args) == 2:
                low, high = int(args[0]), int(args[1])
            else:
                return await utils.answer(message, self.strings("roll_usage"))
            if low > high:
                low, high = high, low
            result = random.randint(low, high)
            await utils.answer(message, f"{emoji}{self.strings('roll_result').split(': ')[0]}: {result}")
        except Exception:
            return await utils.answer(message, self.strings("roll_usage"))

    @loader.command(ru_doc="–£—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏", description=".luck ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —É–¥–∞—á—É")
    async def luckcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏"""
        result = random.randint(0, 100)
        emoji = "üå† " if self.config["emoji"] else ""
        await utils.answer(message, f"{emoji}{self.strings('luck_result').split(': ')[0]}: {result}%")

    @loader.command(ru_doc="–°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", description=".luckmsg ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    async def luckmsgcmd(self, message):
        """–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞—á–∏"""
        msg = random.choice(self.strings("luck_messages"))
        await utils.answer(message, msg)

    @loader.command(ru_doc="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É", description=".coin ‚Äî –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞")
    async def coincmd(self, message):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã"""
        if random.choice([True, False]):
            await utils.answer(message, self.strings("coin_heads"))
        else:
            await utils.answer(message, self.strings("coin_tails"))

    @loader.command(ru_doc="–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", description=".language <ru/en> ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞")
    async def languagecmd(self, message):
        """–ò–∑–º–µ–Ω—è–µ—Ç —è–∑—ã–∫ –º–æ–¥—É–ª—è"""
        arg = utils.get_args_raw(message).lower()
        if arg not in ["ru", "en"]:
            return await utils.answer(message, self.strings("language_usage"))
        self.config["language"] = arg
        await utils.answer(message, self.strings("language_set").format(arg))

