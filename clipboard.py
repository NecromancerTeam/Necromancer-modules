# Necromanser modules
# ¬© Copyright 2025
# Git Hub https://github.com/NecromancerTeam/Modules-Heroku
# N:modules https://t.me/Lptmiop
# By Lptm-iop $ Necromanser team

from .. import loader, utils
import json

@loader.tds
class ClipboardMod(loader.Module):
    """üìã Clipboard ‚Äî –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: —Å–æ—Ö—Ä–∞–Ω—è–π, –≤—Å—Ç–∞–≤–ª—è–π –∏ —É–ø—Ä–∞–≤–ª—è–π —Ç–µ–∫—Å—Ç–æ–º"""

    strings = {
        "name": "Clipboard",
        "copyed": "üìã –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±—É—Ñ–µ—Ä <code>{}</code>",
        "pasted": "üìã –ë—É—Ñ–µ—Ä <code>{}</code>:\n<code>{}</code>",
        "cleared": "üóëÔ∏è –ë—É—Ñ–µ—Ä <code>{}</code> –æ—á–∏—â–µ–Ω",
        "not_found": "‚ùå –ë—É—Ñ–µ—Ä <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "imported": "‚úÖ –ë—É—Ñ–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã",
        "exported": "üì¶ –≠–∫—Å–ø–æ—Ä—Ç –±—É—Ñ–µ—Ä–æ–≤:\n<code>{}</code>",
        "list": "üìÑ –°–ø–∏—Å–æ–∫ –±—É—Ñ–µ—Ä–æ–≤:\n{}",
        "empty": "üö´ –ù–µ—Ç –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "default_name", "main",
                lambda: "–ò–º—è –±—É—Ñ–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            ),
            loader.ConfigValue(
                "log_copies", True,
                lambda: "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ .copy"
            ),
        )
        self.clipboard = {}

    @loader.command(
        ru_doc="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä. –ü—Ä–∏–º–µ—Ä: .copy –∑–∞–º–µ—Ç–∫–∞ –ü—Ä–∏–≤–µ—Ç!",
        description="–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ –∏–º–µ–Ω–µ–º –±—É—Ñ–µ—Ä–∞"
    )
    async def copy(self, message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .copy [–∏–º—è] <—Ç–µ–∫—Å—Ç>")
        parts = args.split(maxsplit=1)
        if len(parts) == 1:
            name = self.config["default_name"]
            text = parts[0]
        else:
            name, text = parts
        self.clipboard[name] = text
        if self.config["log_copies"]:
            await utils.answer(message, self.strings("copyed").format(name))
        else:
            await utils.answer(message, "‚úÖ")

    @loader.command(
        ru_doc="–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: .paste –∑–∞–º–µ—Ç–∫–∞",
        description="–í—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞"
    )
    async def paste(self, message):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞"""
        name = utils.get_args_raw(message) or self.config["default_name"]
        if name not in self.clipboard:
            return await utils.answer(message, self.strings("not_found").format(name))
        await utils.answer(message, self.strings("pasted").format(name, self.clipboard[name]))

    @loader.command(
        ru_doc="–û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä. –ü—Ä–∏–º–µ—Ä: .clearclip –∑–∞–º–µ—Ç–∫–∞",
        description="–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä"
    )
    async def clearclip(self, message):
        """–£–¥–∞–ª—è–µ—Ç –±—É—Ñ–µ—Ä –∏–∑ –ø–∞–º—è—Ç–∏"""
        name = utils.get_args_raw(message) or self.config["default_name"]
        if name in self.clipboard:
            del self.clipboard[name]
            await utils.answer(message, self.strings("cleared").format(name))
        else:
            await utils.answer(message, self.strings("not_found").format(name))

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤",
        description="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã"
    )
    async def cliplist(self, message):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤"""
        if not self.clipboard:
            return await utils.answer(message, self.strings("empty"))
        out = "\n".join(f"‚Ä¢ <b>{k}</b>: {len(v)} —Å–∏–º–≤–æ–ª–æ–≤" for k, v in self.clipboard.items())
        await utils.answer(message, self.strings("list").format(out))

    @loader.command(
        ru_doc="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±—É—Ñ–µ—Ä—ã –≤ JSON",
        description="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
    )
    async def clipexport(self, message):
        """–≠–∫—Å–ø–æ—Ä—Ç –±—É—Ñ–µ—Ä–æ–≤ –≤ JSON"""
        if not self.clipboard:
            return await utils.answer(message, self.strings("empty"))
        data = json.dumps(self.clipboard)
        await utils.answer(message, self.strings("exported").format(data))

    @loader.command(
        ru_doc="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±—É—Ñ–µ—Ä—ã –∏–∑ JSON (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)",
        description="–ò–º–ø–æ—Ä—Ç –±—É—Ñ–µ—Ä–æ–≤ –∏–∑ JSON"
    )
    async def clipimport(self, message):
        """–ò–º–ø–æ—Ä—Ç –±—É—Ñ–µ—Ä–æ–≤ –∏–∑ JSON-–æ—Ç–≤–µ—Ç–∞"""
        reply = await message.get_reply_message()
        if not reply or not reply.text:
            return await utils.answer(message, "‚ùó –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å JSON-–¥–∞–Ω–Ω—ã–º–∏ –±—É—Ñ–µ—Ä–æ–≤")
        try:
            data = json.loads(reply.text)
            if isinstance(data, dict):
                self.clipboard = data
                await utils.answer(message, self.strings("imported"))
            else:
                raise ValueError
        except Exception:
            await utils.answer(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")

    @loader.command(
        ru_doc="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å ‚Äî –≤—ã–≤–µ—Å—Ç–∏ JSON –±—É—Ñ–µ—Ä–æ–≤ –≤ —á–∞—Ç",
        description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç JSON –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    )
    async def clipsync(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç JSON –±—É—Ñ–µ—Ä–æ–≤ –≤ —á–∞—Ç–µ"""
        if not self.clipboard:
            return await utils.answer(message, self.strings("empty"))
        await utils.answer(message, "<code>" + json.dumps(self.clipboard) + "</code>")

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –º–æ–¥—É–ª—é",
        description="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ"
    )
    async def cliphelp(self, message):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –º–æ–¥—É–ª—è"""
        help_text = (
            "<b>üìã Clipboard Module ‚Äî –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            ".copy [–∏–º—è] <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
            ".paste [–∏–º—è] ‚Äî –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞\n"
            ".clearclip [–∏–º—è] ‚Äî —É–¥–∞–ª–∏—Ç—å –±—É—Ñ–µ—Ä\n"
            ".cliplist ‚Äî —Å–ø–∏—Å–æ–∫ –±—É—Ñ–µ—Ä–æ–≤\n"
            ".clipexport ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –±—É—Ñ–µ—Ä–æ–≤ –≤ JSON\n"
            ".clipimport ‚Äî –∏–º–ø–æ—Ä—Ç –±—É—Ñ–µ—Ä–æ–≤ –∏–∑ JSON (–æ—Ç–≤–µ—Ç)\n"
            ".clipsync ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å JSON –±—É—Ñ–µ—Ä–æ–≤ –≤ —á–∞—Ç–µ\n"
            ".cliphelp ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
        await utils.answer(message, help_text)