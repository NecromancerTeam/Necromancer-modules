# Necromanser modules
# ¬© Copyright 2025
# Git Hub https://github.com/NecromancerTeam/Modules-Heroku
# N:modules https://t.me/Lptmiop
# By Lptm-iop $ Necromanser team
from .. import loader, utils
from hikkatl.tl.types import Message
import requests

@loader.tds
class Weather(loader.Module):
    """üå¶ Weather ‚Äî –ø–æ–≥–æ–¥–∞"""

    strings = {
        "name": "Weather",
        "no_location": "<b>‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.</b>",
        "error": "<b>‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:</b> <code>{}</code>",
        "help": (
            "<b>üåç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Weather:</b>\n"
            "<code>.weather [–≥–æ—Ä–æ–¥]</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è\n"
            "–ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ IP\n"
            "<code>.whelp</code> ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
        )
    }

    EMOJI_MAP = {
        "clear": "‚òÄÔ∏è",
        "sun": "‚òÄÔ∏è",
        "sunny": "‚òÄÔ∏è",
        "cloud": "‚òÅÔ∏è",
        "cloudy": "‚òÅÔ∏è",
        "rain": "üåß",
        "drizzle": "üå¶",
        "shower": "üå¶",
        "storm": "‚õà",
        "thunder": "‚õà",
        "snow": "‚ùÑÔ∏è",
        "fog": "üå´",
        "mist": "üå´",
        "haze": "üå´",
        "wind": "üí®",
    }

    def get_emoji(self, desc: str) -> str:
        desc = desc.lower()
        for key, emoji in self.EMOJI_MAP.items():
            if key in desc:
                return emoji
        return "üåà"

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É —Å 3-–¥–Ω–µ–≤–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º. –ü—Ä–∏–º–µ—Ä: .weather –ú–æ—Å–∫–≤–∞")
    async def weathercmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ –ø–æ IP, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"""
        city = utils.get_args_raw(message).strip()
        if not city:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ IP
            try:
                ip_data = requests.get("http://ip-api.com/json/").json()
                if ip_data.get("status") == "success":
                    city = ip_data.get("city")
                else:
                    await utils.answer(message, self.strings("no_location"), parse_mode="html")
                    return
            except Exception:
                await utils.answer(message, self.strings("no_location"), parse_mode="html")
                return

        try:
            url = f"https://wttr.in/{city}?format=j1"
            resp = requests.get(url)
            if resp.status_code != 200:
                raise Exception(f"HTTP {resp.status_code}")

            data = resp.json()

            current = data["current_condition"][0]
            desc = current["weatherDesc"][0]["value"]
            emoji = self.get_emoji(desc)

            temp_c = current["temp_C"]
            feels_like = current["FeelsLikeC"]
            humidity = current["humidity"]
            wind_kph = current["windspeedKmph"]

            result = f"üåç <b>–ü–æ–≥–æ–¥–∞ –≤ {city}:</b>\n" \
                     f"{emoji} {desc}\n" \
                     f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp_c}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n" \
                     f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{humidity}%</b>\n" \
                     f"üí® –í–µ—Ç–µ—Ä: <b>{wind_kph} –∫–º/—á</b>\n\n" \
                     f"<b>üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è:</b>\n"

            for day in data["weather"][:3]:
                date = day["date"]
                maxtemp = day["maxtempC"]
                mintemp = day["mintempC"]
                day_desc = day["hourly"][4]["weatherDesc"][0]["value"]
                day_emoji = self.get_emoji(day_desc)
                result += f"{date}: {day_emoji} {day_desc}, {mintemp}¬∞C‚Ä¶{maxtemp}¬∞C\n"

            await utils.answer(message, result, parse_mode="html")

        except Exception as e:
            await utils.answer(message, self.strings("error").format(e), parse_mode="html")

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –º–æ–¥—É–ª—é Weather")
    async def whelpcmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –º–æ–¥—É–ª—é"""
        await utils.answer(message, self.strings("help"), parse_mode="html")