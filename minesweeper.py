# Necromanser modules
# ¬© Copyright 2025
# Git Hub https://github.com/NecromancerTeam/Modules-Heroku
# N:modules https://t.me/Lptmiop
# By Lptm-iop $ Necromanser team
import random
from .. import loader, utils

@loader.tds
class MinesweeperMod(loader.Module):
    """üß® –ò–≥—Ä–∞ –≤ —Å–∞–ø—ë—Ä–∞ –ø—Ä—è–º–æ –≤ Telegram"""

    strings = {"name": "Minesweeper"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("rows", 8, lambda: "üìê –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ (–º–∏–Ω–∏–º—É–º 3, –º–∞–∫—Å–∏–º—É–º 15)"),
            loader.ConfigValue("cols", 8, lambda: "üìè –ö–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ (–º–∏–Ω–∏–º—É–º 3, –º–∞–∫—Å–∏–º—É–º 15)"),
            loader.ConfigValue("mines", 10, lambda: "üí£ –ö–æ–ª-–≤–æ –º–∏–Ω (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å < rows * cols)")
        )
        self.games = {}

    def _create_board(self, rows, cols, mines):
        board = [[0 for _ in range(cols)] for _ in range(rows)]
        mine_positions = set()

        while len(mine_positions) < mines:
            r = random.randint(0, rows - 1)
            c = random.randint(0, cols - 1)
            mine_positions.add((r, c))

        for r, c in mine_positions:
            board[r][c] = 'üí£'
            for i in range(max(0, r - 1), min(rows, r + 2)):
                for j in range(max(0, c - 1), min(cols, c + 2)):
                    if board[i][j] != 'üí£':
                        board[i][j] += 1

        return board, mine_positions

    def _render(self, state, revealed, flagged):
        rows, cols = len(state), len(state[0])
        result = ""
        for i in range(rows):
            for j in range(cols):
                if (i, j) in flagged:
                    result += "üö©"
                elif (i, j) not in revealed:
                    result += "‚¨ú"
                else:
                    val = state[i][j]
                    if val == 0:
                        result += "‚¨õ"
                    elif val == 'üí£':
                        result += "üí£"
                    else:
                        result += str(val)
            result += "\n"
        return result

    def _reveal(self, state, revealed, r, c):
        stack = [(r, c)]
        while stack:
            x, y = stack.pop()
            if (x, y) in revealed:
                continue
            revealed.add((x, y))
            if state[x][y] == 0:
                for dx in range(-1, 2):
                    for dy in range(-1, 2):
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < len(state) and 0 <= ny < len(state[0]):
                            stack.append((nx, ny))

    @loader.command(ru_doc="–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É")
    async def mine(self, message):
        """–ó–∞–ø—É—Å–∫ —Å–∞–ø—ë—Ä–∞"""
        uid = utils.get_chat_id(message)
        rows = self.config["rows"]
        cols = self.config["cols"]
        mines = self.config["mines"]
        if rows < 3 or cols < 3 or rows > 15 or cols > 15 or mines >= rows * cols:
            await utils.answer(message, "<b>‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.</b>")
            return

        board, mine_pos = self._create_board(rows, cols, mines)
        self.games[uid] = {
            "board": board,
            "revealed": set(),
            "flagged": set(),
            "mines": mine_pos,
            "active": True,
        }

        await utils.answer(message, "<b>üß® –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n" + self._render(board, set(), set()))

    @loader.command(ru_doc="–û—Ç–∫—Ä—ã—Ç—å —è—á–µ–π–∫—É .reveal <—Ä—è–¥> <–∫–æ–ª–æ–Ω–∫–∞>")
    async def reveal(self, message):
        """–û—Ç–∫—Ä—ã—Ç—å —è—á–µ–π–∫—É"""
        args = utils.get_args(message)
        uid = utils.get_chat_id(message)
        if uid not in self.games or not self.games[uid]["active"]:
            return await utils.answer(message, "<b>‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.</b>")

        if len(args) != 2 or not all(x.isdigit() for x in args):
            return await utils.answer(message, "<b>üìç –ò—Å–ø–æ–ª—å–∑—É–π: .reveal <—Ä—è–¥> <–∫–æ–ª–æ–Ω–∫–∞></b>")

        r, c = int(args[0]) - 1, int(args[1]) - 1
        game = self.games[uid]
        board = game["board"]

        if not (0 <= r < len(board)) or not (0 <= c < len(board[0])):
            return await utils.answer(message, "<b>‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.</b>")

        if (r, c) in game["flagged"]:
            return await utils.answer(message, "<b>üö© –¢–∞–º —Ñ–ª–∞–≥. –°–Ω–∞—á–∞–ª–∞ —É–±–µ—Ä–∏ –µ–≥–æ.</b>")

        if board[r][c] == 'üí£':
            game["revealed"].add((r, c))
            game["active"] = False
            await utils.answer(message, "<b>üí• –ë–£–ú! –¢—ã –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –±–æ–º–±—É. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ ‚Äî —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª.</b>\n\n" + self._render(board, game["revealed"], game["flagged"]))
            return

        self._reveal(board, game["revealed"], r, c)
        await utils.answer(message, self._render(board, game["revealed"], game["flagged"]))

    @loader.command(ru_doc="–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ .flag <—Ä—è–¥> <–∫–æ–ª–æ–Ω–∫–∞>")
    async def flag(self, message):
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥"""
        args = utils.get_args(message)
        uid = utils.get_chat_id(message)
        if uid not in self.games or not self.games[uid]["active"]:
            return await utils.answer(message, "<b>‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.</b>")
        if len(args) != 2 or not all(x.isdigit() for x in args):
            return await utils.answer(message, "<b>üìç –ò—Å–ø–æ–ª—å–∑—É–π: .flag <—Ä—è–¥> <–∫–æ–ª–æ–Ω–∫–∞></b>")

        r, c = int(args[0]) - 1, int(args[1]) - 1
        game = self.games[uid]

        if (r, c) in game["flagged"]:
            return await utils.answer(message, "<b>‚ö†Ô∏è –¢–∞–º —É–∂–µ —Å—Ç–æ–∏—Ç —Ñ–ª–∞–≥.</b>")

        game["flagged"].add((r, c))
        await utils.answer(message, self._render(game["board"], game["revealed"], game["flagged"]))

    @loader.command(ru_doc="–£–±—Ä–∞—Ç—å —Ñ–ª–∞–≥ .unflag <—Ä—è–¥> <–∫–æ–ª–æ–Ω–∫–∞>")
    async def unflag(self, message):
        """–£–±—Ä–∞—Ç—å —Ñ–ª–∞–≥"""
        args = utils.get_args(message)
        uid = utils.get_chat_id(message)
        if uid not in self.games or not self.games[uid]["active"]:
            return await utils.answer(message, "<b>‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.</b>")
        if len(args) != 2 or not all(x.isdigit() for x in args):
            return await utils.answer(message, "<b>üìç –ò—Å–ø–æ–ª—å–∑—É–π: .unflag <—Ä—è–¥> <–∫–æ–ª–æ–Ω–∫–∞></b>")

        r, c = int(args[0]) - 1, int(args[1]) - 1
        game = self.games[uid]

        if (r, c) in game["flagged"]:
            game["flagged"].remove((r, c))
            await utils.answer(message, self._render(game["board"], game["revealed"], game["flagged"]))
        else:
            await utils.answer(message, "<b>üö´ –¢–∞–º –Ω–µ—Ç —Ñ–ª–∞–≥–∞.</b>")

    @loader.command(ru_doc="–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É")
    async def minereset(self, message):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"""
        uid = utils.get_chat_id(message)
        if uid in self.games:
            del self.games[uid]
        await utils.answer(message, "<b>üîÑ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞.</b>")